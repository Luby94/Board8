


■ 고객의 (구체적인) 니즈는 본인도 모름 → 개발자들이 니즈를 구체적으로 캐치하고 끌어내야함

■ 고객 : 잘만들어주세요
  = 예쁘게
   + 오류없이
   + 사용편의성
   + 비용적게

■ 가끔씩 고객의 커뮤니케이션 스킬도 길러줄때도...
  9개월 프로젝트 오픈 이틀 전 무리한 색상변경 요구
    → 그에 대한 보상 요구함(3주간 딜레이 + 이후 토달지 않겠다는 대표승인 사인 etc)

■ 개발자란, 소프트웨어 개발자 줄여서
  시스템 분석가의 요구에 맞게 컴퓨터 프로그래밍을 하거나 시스템 설계를 하는 사람
  고객의 어려움, 문제를 해결해주는 사람

■ V-MODEL SOFRWARE DEVELOPMENT
  1. 요구사항 수집    ↔ 사용자 테스트
  2. 시스템환경정리   ↔ 시스템 테스트
  3. 개념설계         ↔ 통합 테스트
  4. 상세설계         ↔ 유닛 테스트
  5. 개발
  6. 테스트 : 유닛테스트
  7. 통합 테스트
  8. 시스템 테스트
  9. RELEASE TESTING : 사용자 테스트

1. 요구사항 수집
   인터뷰
   설문지
   업무 관찰
 ∴ 질문을 통해 끌어내야함
   Q. 하는 업무가 뭐에요? → X
   Q. 발주 어떻게 해요?   → O
      자재단가 이력, 견적서, 결재 담당자 etc 정보 catch

 [요구사항 정의서]
 • 시스템명                 • 업무영역
 • 요구사항ID ★★★           • 요구사항명
    └ R00001, 나중에 추적에 쓰임, 겁나 중요
 • 요구사항 설명
 • 세부내용 및 요건
 • 제약사항 및 전제조건
 • 유형 (기능, 비기능)      • 업무담당자 (서명)
                               └ 누가 얘기한건지 꼭 받아야함
  출처
  기타사항

  ※ 기능   : 저장 버튼 어떻게 만들어달라
  ※ 비기능 : 속도 클릭하는 순간 나오게 해달라

 [회의록]
  1. 일시
  2. 장소
  3. 주최자
  4. 안건
  5. 회의 내용
  6. 회의 결과
  7. 특이 사항
  8. 참석자 (서명)
  → 거의 완녹수준으로, 때론 녹음도(양해구하고)

 [데이터베이스]
  Database Modeling
  1. Naming → 네이밍만 보고도 필드에 대해 알 수 있도록
   - 이름은 오래 지속됨
   - 의사소통
   - 명사 사용
   - 약어 사용 자제
   - 두 단어는 "_" 로 구분(Snake case)

  2. Primary key
   - 모든 릴레이션은 Primary key 를 가져야 한다
     ※ 릴레이션 = 테이블 → 레코드가 가지는 유일한 항목
   - null 값이 들어갈 수 없음
   - 동일한 값이 들어갈 수 없음
   ※ var character 를 pk 로 지정하면, number(index) 로 하는것보다 느리다

  3. Noemalization (정규화)
   [장점]
   - 이상현상 제거
   - 확장 시 구조를 변경하지 않아도 됨

   ※ 최소 BCNF 까지 정규화 권장
     (3차 정규화에서 제거할 수 없는 이상현상을 제거할 수 있다)

   [단점]
   - 릴레이션간 JOIN 연산이 많아 짐
   - 응답시간이 느려질 수 있음
   ※ JOIN 되는만큼 소요시간 길어짐, 정규화도 가능한 최소화

  4. Field size
   - CHAR(17) : 24바이트 할당
   - CHAR(16) : 16바이트 할당
   1byte = 8bit
   8비트 단위로 증가, 8바이트 단위로 증가를 지정
   → 숫자 1차이에 CHAR(17) 은 페이지 하나 더 씀

  5. Indexes
   왜 Index 를 사용해야 할까?

   [장점]
   - 검색 속도가 빠르다
   - 중복 데이터 방지, 유일성(Unique)
   → Index 는 검색 및 처리하는 속도를 향상시키는데 중요한 역할

   [단점]
   - 추가적인 저장공간 필요
   - 성능 저하 발생(Insert, Update)
   - Index 생성 시간이 오래 걸림


■ 개발 가장 중요한 것
  1. 차별화
  2. 무결성 : 오류가 없어야 함
  3. 사용성 (UI/UX)
  4. 납기
  5. 동료 검토

1. 차별화
   내가 만들고 있는 시스템 ↔ 경쟁 시스템
2. 무결성
   검토할 것
   - 설계에 문제가 없었는지
   - 내가 만든 소스코드에 문제가 없었는지
3. 사용성
   보기 좋은 떡이 먹기 좋다
   화면&항목별 이동 (사용자 경험)
4. 납기 ★★★ 제일 중요
   고객과의 약속
   클레임
   페널티
5. 동료 검토
   프로젝트 수행 과정에서 각 진행 단계별로 발생하는 산출물 또는 개발 소스에 대해서 동료들이 상호 교차 검토하는 활동
   ※ 품질 향상의 필수 기법
     1) 결과를 검토하고 논쟁과 반박을 제한
     2) 제기된 문제는 바로 해결하지 않고 검토모임 후에
     3) 참가자의 수를 제한
     4) 사전 준비
     5) 체크리스트를 작성하고 자원과 시간을 할당
     6) 검토자 교육
     7) 검토 과정과 결과를 재검토


■ Test
  1. Unit Test
   : 프로그래머가 자기가 만든 프로그램을 테스트
   : 각 개별 프로그램 테스트
   : 체크 리스트 작성
   ① 테스트 시나리오
    → 단위 테스트ID, 단위 테스트명, 테스트 시나리오, 테스트 데이터, 예상결과, 테스트 결과
   ② 결함관리 내역

  2. 통합 Test
   : 모듈단위

  3. 유저 Test
   : 사용자만 테스트 진행
   : 개발자는 참여 불가

  4. Realease


■ Study
  아는 만큼 보인다.
  Udemy: https://www.udemy.com/


